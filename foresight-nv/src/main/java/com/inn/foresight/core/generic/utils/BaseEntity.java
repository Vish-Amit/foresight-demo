package com.inn.foresight.core.generic.utils;

import java.util.Date;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.PrePersist;

import org.hibernate.envers.Audited;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.google.gson.annotations.Expose;
import com.inn.product.um.user.model.User;
import com.inn.product.um.user.service.impl.UserContextServiceImpl;

/**
 * The Class BaseEntity.
 *
 * @author Autogenerated by Headstart
 * @version 1.0
 */

/**
 * 
 * BaseEntity
 * 
 */
@MappedSuperclass
@Audited
public abstract class BaseEntity {

	/** The modified time. */
	@Basic
	@Expose
	@Column(name = "modificationtime", insertable = true, updatable = true)
	protected Date modifiedTime;

	/** The created time. */
	@Basic
	@Expose
	@Column(name = "creationtime", insertable = true, updatable = false)
	protected Date createdTime;

	/** The creator. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "creatorid_fk", updatable = false)
	protected User creator;

	/**
	 * Gets the creator.
	 *
	 * @return the creator
	 */
	public User getCreator() {
		return creator;
	}

	/**
	 * Sets the creator.
	 *
	 * @param creator the new creator
	 */
	public void setCreator(User creator) {
		this.creator = creator;
	}

	/**
	 * Gets the last modifier.
	 *
	 * @return the last modifier
	 */
	@JsonIgnore
	public User getLastModifier() {
		return lastModifier;
	}

	/**
	 * Sets the last modifier.
	 *
	 * @param lastModifier the new last modifier
	 */
	public void setLastModifier(User lastModifier) {
		this.lastModifier = lastModifier;
	}

	/** The last modifier. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "lastModifierid_FK")
	protected User lastModifier;

	/**
	 * Gets the modified time.
	 *
	 * @return the modifiedTime
	 */

	public Date getModifiedTime() {
		return modifiedTime;
	}

	/**
	 * Sets the modified time.
	 *
	 * @param modifiedTime            the modifiedTime to set
	 */
	public void setModifiedTime(Date modifiedTime) {
		this.modifiedTime = modifiedTime;
	}

	/**
	 * Gets the created time.
	 *
	 * @return the dateCreaTech
	 */

	public Date getCreatedTime() {
		return createdTime;
	}

	/**
	 * Sets the created time.
	 *
	 * @param createdTime            the createdTime to set
	 */
	public void setCreatedTime(Date createdTime) {
		this.createdTime = createdTime;
	}

	/**
	 * On create.
	 */
	@PrePersist
	void onCreate() 
	{
		try
		{
			int userid=UserContextServiceImpl.getUserInContext().getUserid();
			User userInContext = new User(userid);
			this.setCreator(userInContext);
			this.setLastModifier(userInContext);
		}
		catch(UnsupportedOperationException e)
		{
			e.getMessage();

		}catch(Exception en){
			en.getMessage();
		}
		Date date = new Date();
		this.setCreatedTime(date);
		this.setModifiedTime(date);
	}
	
	/**
	 * On update.
	 */
//	@PreUpdate
	void onUpdate() {
		try {
			User delegatedCustomer= null; //DelegatedCustomerInfo.getDelegateUserInContext();
			if(delegatedCustomer!=null) {
				User user = new User(delegatedCustomer.getUserid());
				this.setLastModifier(user);	
			}else {
				Integer userid = UserContextServiceImpl.getUserInContext().getUserid();
				if(userid!=null) {
					User userInContext = new User(userid);
					this.setLastModifier(userInContext);
				}
			}
		} catch (UnsupportedOperationException e) {
			e.getMessage();

		}
		catch(Exception en)
		{en.getMessage();}
		Date date = new Date();
		this.setModifiedTime(date);
	}
}
